/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Sender, SenderInterface } from "../../Sender.sol/Sender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "l1CrossDomainMessengerAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opReceiverContractAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
    ],
    name: "doSendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "messenger",
    outputs: [
      {
        internalType: "contract IL1CrossDomainMessenger",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161062a38038061062a833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610513806101176000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633cb747bf1461003b578063d718095a14610059575b600080fd5b610043610075565b604051610050919061020e565b60405180910390f35b610073600480360381019061006e91906102d6565b610099565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633dbb202b858386866040516024016100f0939291906103a3565b6040516020818303038152906040526349ab518260e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620f42406040518463ffffffff1660e01b81526004016101579392919061049f565b600060405180830381600087803b15801561017157600080fd5b505af1158015610185573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006101d46101cf6101ca8461018f565b6101af565b61018f565b9050919050565b60006101e6826101b9565b9050919050565b60006101f8826101db565b9050919050565b610208816101ed565b82525050565b600060208201905061022360008301846101ff565b92915050565b600080fd5b600080fd5b600061023e8261018f565b9050919050565b61024e81610233565b811461025957600080fd5b50565b60008135905061026b81610245565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261029657610295610271565b5b8235905067ffffffffffffffff8111156102b3576102b2610276565b5b6020830191508360018202830111156102cf576102ce61027b565b5b9250929050565b6000806000604084860312156102ef576102ee610229565b5b60006102fd8682870161025c565b935050602084013567ffffffffffffffff81111561031e5761031d61022e565b5b61032a86828701610280565b92509250509250925092565b61033f81610233565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006103828385610345565b935061038f838584610356565b61039883610365565b840190509392505050565b60006040820190506103b86000830186610336565b81810360208301526103cb818486610376565b9050949350505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561040f5780820151818401526020810190506103f4565b60008484015250505050565b6000610426826103d5565b61043081856103e0565b93506104408185602086016103f1565b61044981610365565b840191505092915050565b6000819050919050565b600063ffffffff82169050919050565b600061048961048461047f84610454565b6101af565b61045e565b9050919050565b6104998161046e565b82525050565b60006060820190506104b46000830186610336565b81810360208301526104c6818561041b565b90506104d56040830184610490565b94935050505056fea264697066735822122068f0088d1a65237c09710b56c527ae63c9cddecf8c04225cbb9c637033d9485a64736f6c63430008180033";

type SenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Sender__factory extends ContractFactory {
  constructor(...args: SenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    l1CrossDomainMessengerAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      l1CrossDomainMessengerAddress,
      overrides || {}
    );
  }
  override deploy(
    l1CrossDomainMessengerAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      l1CrossDomainMessengerAddress,
      overrides || {}
    ) as Promise<
      Sender & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Sender__factory {
    return super.connect(runner) as Sender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SenderInterface {
    return new Interface(_abi) as SenderInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Sender {
    return new Contract(address, _abi, runner) as unknown as Sender;
  }
}
